# File: web-data-scraper/configs/example_config.yaml

# Keep the existing Amazon example, but add processing rules
name: "Amazon Product Scraper"
description: "Scrape product prices from Amazon search results"
urls:
  - "https://www.amazon.com/s?k=laptops"
  # - "https://www.amazon.com/s?k=laptops&page=2" # Comment out second page for faster testing initially
dynamic: true  # Requires Selenium as Amazon uses JavaScript
selectors:
  type: css
  container: "div.s-main-slot"  # The main area holding ALL search results
  item: "div[data-component-type='s-search-result']" # Each individual search result block
  fields:
    # Selectors relative to the item div (div[data-component-type='s-search-result'])
    title: "h2 a span.a-text-normal"
    price_symbol: "span.a-price-symbol"
    price_whole: "span.a-price-whole"
    price_fraction: "span.a-price-fraction"
    rating: "span.a-icon-alt" # e.g., "4.5 out of 5 stars"
    url: {"selector": "h2 a.a-link-normal", "attr": "href"}
    image_url: {"selector": "img.s-image", "attr": "src"}

# --- Added Example Processing Rules for Amazon ---
processing_rules:
  field_types:
    # Combine price parts and convert to float (done in transformations below)
    rating_value: {"type": "float"} # To convert extracted numeric rating
  text_cleaning:
    title: {"trim": True}
    rating: {"trim": True}
  validations:
    url: {"required": True, "pattern": r"^/dp/"} # Amazon product URLs often start with /dp/ relative to amazon.com
    price_whole": {"required": True} # Need at least the whole part of the price
  transformations:
    # Combine price parts into a single float field
    price: | # Using YAML block scalar for multi-line lambda/expression
      (
          float(item.get('price_whole', '0').replace(',', '')) +
          float(item.get('price_fraction', '0')) / 100
      ) if item.get('price_whole') else None
    # Extract numeric rating (e.g., "4.5" from "4.5 out of 5 stars")
    rating_value: |
      float(value.split()[0]) if isinstance(value, str) and 'out of' in value else None
    # Construct full URL
    full_url: "'https://www.amazon.com' + value if isinstance(value, str) and value.startswith('/dp/') else value"

  drop_fields: ["price_symbol", "price_whole", "price_fraction", "rating"] # Remove original fields

# --- End Processing Rules ---

output_dir": "outputs/amazon_laptops" # Specific output directory
request_delay": 4 # Be polite with delays, especially for dynamic scraping
max_retries": 2
user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36" # Use a realistic browser UA
respect_robots": True
wait_for_selector": "div[data-component-type='s-search-result']" # Wait for results to appear
headless": True # Run headless by default
page_load_timeout": 45 # Increase timeout slightly for potentially heavy pages
